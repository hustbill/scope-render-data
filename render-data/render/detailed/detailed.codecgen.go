// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package detailed

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_report "github.com/weaveworks/scope/report"
	"reflect"
	"runtime"
	time "time"
	"unsafe"
)

const (
	// ----- content types ----
	codecSelferC_UTF81256 = 1
	codecSelferC_RAW1256  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1256 = 10
	codecSelferValueTypeMap1256   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1256    = 2
	codecSelfer_containerMapValue1256  = 3
	codecSelfer_containerMapEnd1256    = 4
	codecSelfer_containerArrayElem1256 = 6
	codecSelfer_containerArrayEnd1256  = 7
)

var (
	codecSelferBitsize1256                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1256 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelferUnsafeString1256 struct {
	Data uintptr
	Len  int
}

type codecSelfer1256 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_report.MetadataRow
		var v1 time.Time
		var v2 unsafe.Pointer
		_, _, _ = v0, v1, v2
	}
}

func (x *Diff) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Add == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Add), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("add"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Add == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Add), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Update == nil {
					r.EncodeNil()
				} else {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Update), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("update"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Update == nil {
					r.EncodeNil()
				} else {
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Update), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Remove == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						z.F.EncSliceStringV(x.Remove, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("remove"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Remove == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						z.F.EncSliceStringV(x.Remove, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *Diff) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *Diff) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv4 := &x.Add
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSliceNodeSummary((*[]NodeSummary)(yyv4), d)
				}
			}
		case "update":
			if r.TryDecodeAsNil() {
				x.Update = nil
			} else {
				yyv6 := &x.Update
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSliceNodeSummary((*[]NodeSummary)(yyv6), d)
				}
			}
		case "remove":
			if r.TryDecodeAsNil() {
				x.Remove = nil
			} else {
				yyv8 := &x.Remove
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					z.F.DecSliceStringX(yyv8, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *Diff) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv11 := &x.Add
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			h.decSliceNodeSummary((*[]NodeSummary)(yyv11), d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Update = nil
	} else {
		yyv13 := &x.Update
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			h.decSliceNodeSummary((*[]NodeSummary)(yyv13), d)
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Remove = nil
	} else {
		yyv15 := &x.Remove
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			z.F.DecSliceStringX(yyv15, false, d)
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *Parent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.TopologyID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("topologyId"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.TopologyID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *Parent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *Parent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "topologyId":
			if r.TryDecodeAsNil() {
				x.TopologyID = ""
			} else {
				yyv8 := &x.TopologyID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *Parent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv11 := &x.ID
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else {
			*((*string)(yyv11)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv13 := &x.Label
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.TopologyID = ""
	} else {
		yyv15 := &x.TopologyID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *ConnectionsSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.TopologyID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("topologyId"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.TopologyID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("columns"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Connections == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSliceConnection(([]Connection)(x.Connections), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("connections"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Connections == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSliceConnection(([]Connection)(x.Connections), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *ConnectionsSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *ConnectionsSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "topologyId":
			if r.TryDecodeAsNil() {
				x.TopologyID = ""
			} else {
				yyv6 := &x.TopologyID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv8 := &x.Label
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "columns":
			if r.TryDecodeAsNil() {
				x.Columns = nil
			} else {
				yyv10 := &x.Columns
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					h.decSliceColumn((*[]Column)(yyv10), d)
				}
			}
		case "connections":
			if r.TryDecodeAsNil() {
				x.Connections = nil
			} else {
				yyv12 := &x.Connections
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSliceConnection((*[]Connection)(yyv12), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *ConnectionsSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.TopologyID = ""
	} else {
		yyv17 := &x.TopologyID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv19 := &x.Label
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Columns = nil
	} else {
		yyv21 := &x.Columns
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			h.decSliceColumn((*[]Column)(yyv21), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Connections = nil
	} else {
		yyv23 := &x.Connections
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSliceConnection((*[]Connection)(yyv23), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *Connection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[3] = x.LabelMinor != ""
			yyq2[5] = len(x.Metadata) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("nodeId"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81256, string(x.LabelMinor))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81256, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("labelMinor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81256, string(x.LabelMinor))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeBool(bool(x.Linkable))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("linkable"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeBool(bool(x.Linkable))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[5] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym20 := z.EncBinary()
						_ = yym20
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *Connection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *Connection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "nodeId":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv6 := &x.NodeID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv8 := &x.Label
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "labelMinor":
			if r.TryDecodeAsNil() {
				x.LabelMinor = ""
			} else {
				yyv10 := &x.LabelMinor
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "linkable":
			if r.TryDecodeAsNil() {
				x.Linkable = false
			} else {
				yyv12 := &x.Linkable
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*bool)(yyv12)) = r.DecodeBool()
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv14 := &x.Metadata
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv14), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *Connection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv17 := &x.ID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv19 := &x.NodeID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv21 := &x.Label
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.LabelMinor = ""
	} else {
		yyv23 := &x.LabelMinor
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Linkable = false
	} else {
		yyv25 := &x.Linkable
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*bool)(yyv25)) = r.DecodeBool()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv27 := &x.Metadata
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv27), d)
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x connectionsByID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encconnectionsByID((connectionsByID)(x), e)
		}
	}
}

func (x *connectionsByID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decconnectionsByID((*connectionsByID)(x), d)
	}
}

func (x *connection) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *connection) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *connection) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *connection) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *connectionCounters) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [0]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(0)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *connectionCounters) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *connectionCounters) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *connectionCounters) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4 int
	var yyb4 bool
	var yyhl4 bool = l >= 0
	for {
		yyj4++
		if yyhl4 {
			yyb4 = yyj4 > l
		} else {
			yyb4 = r.CheckBreak()
		}
		if yyb4 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj4-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *NodeSummaryGroup) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Nodes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("nodes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Nodes == nil {
					r.EncodeNil()
				} else {
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						h.encSliceNodeSummary(([]NodeSummary)(x.Nodes), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.TopologyID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("topologyId"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.TopologyID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("columns"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Columns == nil {
					r.EncodeNil()
				} else {
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						h.encSliceColumn(([]Column)(x.Columns), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *NodeSummaryGroup) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *NodeSummaryGroup) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "nodes":
			if r.TryDecodeAsNil() {
				x.Nodes = nil
			} else {
				yyv8 := &x.Nodes
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSliceNodeSummary((*[]NodeSummary)(yyv8), d)
				}
			}
		case "topologyId":
			if r.TryDecodeAsNil() {
				x.TopologyID = ""
			} else {
				yyv10 := &x.TopologyID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "columns":
			if r.TryDecodeAsNil() {
				x.Columns = nil
			} else {
				yyv12 := &x.Columns
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					h.decSliceColumn((*[]Column)(yyv12), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *NodeSummaryGroup) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv15 := &x.ID
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv17 := &x.Label
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Nodes = nil
	} else {
		yyv19 := &x.Nodes
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			h.decSliceNodeSummary((*[]NodeSummary)(yyv19), d)
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.TopologyID = ""
	} else {
		yyv21 := &x.TopologyID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Columns = nil
	} else {
		yyv23 := &x.Columns
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			h.decSliceColumn((*[]Column)(yyv23), d)
		}
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *Column) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [4]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(4)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeBool(bool(x.DefaultSort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("defaultSort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeBool(bool(x.DefaultSort))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Datatype))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("dataType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Datatype))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *Column) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *Column) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "defaultSort":
			if r.TryDecodeAsNil() {
				x.DefaultSort = false
			} else {
				yyv8 := &x.DefaultSort
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*bool)(yyv8)) = r.DecodeBool()
				}
			}
		case "dataType":
			if r.TryDecodeAsNil() {
				x.Datatype = ""
			} else {
				yyv10 := &x.Datatype
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *Column) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj12 int
	var yyb12 bool
	var yyhl12 bool = l >= 0
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv13 := &x.ID
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv15 := &x.Label
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.DefaultSort = false
	} else {
		yyv17 := &x.DefaultSort
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*bool)(yyv17)) = r.DecodeBool()
		}
	}
	yyj12++
	if yyhl12 {
		yyb12 = yyj12 > l
	} else {
		yyb12 = r.CheckBreak()
	}
	if yyb12 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Datatype = ""
	} else {
		yyv19 := &x.Datatype
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	for {
		yyj12++
		if yyhl12 {
			yyb12 = yyj12 > l
		} else {
			yyb12 = r.CheckBreak()
		}
		if yyb12 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj12-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *NodeSummary) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [13]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[4] = x.Shape != ""
			yyq2[5] = x.Stack != false
			yyq2[6] = x.Linkable != false
			yyq2[7] = x.Pseudo != false
			yyq2[8] = len(x.Metadata) != 0
			yyq2[9] = len(x.Parents) != 0
			yyq2[10] = len(x.Metrics) != 0
			yyq2[11] = len(x.Tables) != 0
			yyq2[12] = len(x.Adjacency) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(13)
			} else {
				yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.LabelMinor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("labelMinor"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.LabelMinor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81256, string(x.Shape))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81256, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("shape"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81256, string(x.Shape))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("stack"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeBool(bool(x.Linkable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("linkable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeBool(bool(x.Linkable))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("pseudo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[8] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym28 := z.EncBinary()
						_ = yym28
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym29 := z.EncBinary()
						_ = yym29
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[9] {
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("parents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym32 := z.EncBinary()
						_ = yym32
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[10] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym35 := z.EncBinary()
						_ = yym35
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[11] {
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("tables"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[12] {
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf40 := &x.Adjacency
						yysf40.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("adjacency"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf41 := &x.Adjacency
						yysf41.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *NodeSummary) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *NodeSummary) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv4 := &x.ID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv6 := &x.Label
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "labelMinor":
			if r.TryDecodeAsNil() {
				x.LabelMinor = ""
			} else {
				yyv8 := &x.LabelMinor
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = ""
			} else {
				yyv10 := &x.Rank
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "shape":
			if r.TryDecodeAsNil() {
				x.Shape = ""
			} else {
				yyv12 := &x.Shape
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "stack":
			if r.TryDecodeAsNil() {
				x.Stack = false
			} else {
				yyv14 := &x.Stack
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*bool)(yyv14)) = r.DecodeBool()
				}
			}
		case "linkable":
			if r.TryDecodeAsNil() {
				x.Linkable = false
			} else {
				yyv16 := &x.Linkable
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*bool)(yyv16)) = r.DecodeBool()
				}
			}
		case "pseudo":
			if r.TryDecodeAsNil() {
				x.Pseudo = false
			} else {
				yyv18 := &x.Pseudo
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*bool)(yyv18)) = r.DecodeBool()
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv20 := &x.Metadata
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv20), d)
				}
			}
		case "parents":
			if r.TryDecodeAsNil() {
				x.Parents = nil
			} else {
				yyv22 := &x.Parents
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					h.decSliceParent((*[]Parent)(yyv22), d)
				}
			}
		case "metrics":
			if r.TryDecodeAsNil() {
				x.Metrics = nil
			} else {
				yyv24 := &x.Metrics
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv24), d)
				}
			}
		case "tables":
			if r.TryDecodeAsNil() {
				x.Tables = nil
			} else {
				yyv26 := &x.Tables
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					h.decSlicereport_Table((*[]pkg1_report.Table)(yyv26), d)
				}
			}
		case "adjacency":
			if r.TryDecodeAsNil() {
				x.Adjacency = nil
			} else {
				yyv28 := &x.Adjacency
				yyv28.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *NodeSummary) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj29 int
	var yyb29 bool
	var yyhl29 bool = l >= 0
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv30 := &x.ID
		yym31 := z.DecBinary()
		_ = yym31
		if false {
		} else {
			*((*string)(yyv30)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv32 := &x.Label
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			*((*string)(yyv32)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.LabelMinor = ""
	} else {
		yyv34 := &x.LabelMinor
		yym35 := z.DecBinary()
		_ = yym35
		if false {
		} else {
			*((*string)(yyv34)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Rank = ""
	} else {
		yyv36 := &x.Rank
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			*((*string)(yyv36)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Shape = ""
	} else {
		yyv38 := &x.Shape
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			*((*string)(yyv38)) = r.DecodeString()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Stack = false
	} else {
		yyv40 := &x.Stack
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else {
			*((*bool)(yyv40)) = r.DecodeBool()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Linkable = false
	} else {
		yyv42 := &x.Linkable
		yym43 := z.DecBinary()
		_ = yym43
		if false {
		} else {
			*((*bool)(yyv42)) = r.DecodeBool()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Pseudo = false
	} else {
		yyv44 := &x.Pseudo
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			*((*bool)(yyv44)) = r.DecodeBool()
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv46 := &x.Metadata
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv46), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Parents = nil
	} else {
		yyv48 := &x.Parents
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			h.decSliceParent((*[]Parent)(yyv48), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Metrics = nil
	} else {
		yyv50 := &x.Metrics
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv50), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Tables = nil
	} else {
		yyv52 := &x.Tables
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			h.decSlicereport_Table((*[]pkg1_report.Table)(yyv52), d)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Adjacency = nil
	} else {
		yyv54 := &x.Adjacency
		yyv54.CodecDecodeSelf(d)
	}
	for {
		yyj29++
		if yyhl29 {
			yyb29 = yyj29 > l
		} else {
			yyb29 = r.CheckBreak()
		}
		if yyb29 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj29-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x nodeSummariesByID) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encnodeSummariesByID((nodeSummariesByID)(x), e)
		}
	}
}

func (x *nodeSummariesByID) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decnodeSummariesByID((*nodeSummariesByID)(x), d)
	}
}

func (x NodeSummaries) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encNodeSummaries((NodeSummaries)(x), e)
		}
	}
}

func (x *NodeSummaries) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decNodeSummaries((*NodeSummaries)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [16]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[1] = len(x.Children) != 0
			yyq2[2] = len(x.Connections) != 0
			yyq2[7] = x.Shape != ""
			yyq2[8] = x.Stack != false
			yyq2[9] = x.Linkable != false
			yyq2[10] = x.Pseudo != false
			yyq2[11] = len(x.Metadata) != 0
			yyq2[12] = len(x.Parents) != 0
			yyq2[13] = len(x.Metrics) != 0
			yyq2[14] = len(x.Tables) != 0
			yyq2[15] = len(x.Adjacency) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(16)
			} else {
				yynn2 = 5
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if x.Controls == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						h.encSliceControlInstance(([]ControlInstance)(x.Controls), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("controls"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				if x.Controls == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						h.encSliceControlInstance(([]ControlInstance)(x.Controls), e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[1] {
					if x.Children == nil {
						r.EncodeNil()
					} else {
						yym7 := z.EncBinary()
						_ = yym7
						if false {
						} else {
							h.encSliceNodeSummaryGroup(([]NodeSummaryGroup)(x.Children), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("children"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Children == nil {
						r.EncodeNil()
					} else {
						yym8 := z.EncBinary()
						_ = yym8
						if false {
						} else {
							h.encSliceNodeSummaryGroup(([]NodeSummaryGroup)(x.Children), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[2] {
					if x.Connections == nil {
						r.EncodeNil()
					} else {
						yym10 := z.EncBinary()
						_ = yym10
						if false {
						} else {
							h.encSliceConnectionsSummary(([]ConnectionsSummary)(x.Connections), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("connections"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Connections == nil {
						r.EncodeNil()
					} else {
						yym11 := z.EncBinary()
						_ = yym11
						if false {
						} else {
							h.encSliceConnectionsSummary(([]ConnectionsSummary)(x.Connections), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("label"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Label))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.LabelMinor))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("labelMinor"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.LabelMinor))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym22 := z.EncBinary()
				_ = yym22
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym23 := z.EncBinary()
				_ = yym23
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[7] {
					yym25 := z.EncBinary()
					_ = yym25
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81256, string(x.Shape))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81256, "")
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("shape"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81256, string(x.Shape))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[8] {
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("stack"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym29 := z.EncBinary()
					_ = yym29
					if false {
					} else {
						r.EncodeBool(bool(x.Stack))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[9] {
					yym31 := z.EncBinary()
					_ = yym31
					if false {
					} else {
						r.EncodeBool(bool(x.Linkable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("linkable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym32 := z.EncBinary()
					_ = yym32
					if false {
					} else {
						r.EncodeBool(bool(x.Linkable))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[10] {
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("pseudo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					yym35 := z.EncBinary()
					_ = yym35
					if false {
					} else {
						r.EncodeBool(bool(x.Pseudo))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[11] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encSlicereport_MetadataRow(([]pkg1_report.MetadataRow)(x.Metadata), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[12] {
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym40 := z.EncBinary()
						_ = yym40
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("parents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Parents == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							h.encSliceParent(([]Parent)(x.Parents), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[13] {
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym43 := z.EncBinary()
						_ = yym43
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("metrics"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Metrics == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSlicereport_MetricRow(([]pkg1_report.MetricRow)(x.Metrics), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[14] {
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym46 := z.EncBinary()
						_ = yym46
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("tables"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Tables == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							h.encSlicereport_Table(([]pkg1_report.Table)(x.Tables), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				if yyq2[15] {
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf49 := &x.Adjacency
						yysf49.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1256)
					r.EncodeString(codecSelferC_UTF81256, string("adjacency"))
					z.EncSendContainerState(codecSelfer_containerMapValue1256)
					if x.Adjacency == nil {
						r.EncodeNil()
					} else {
						yysf50 := &x.Adjacency
						yysf50.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "controls":
			if r.TryDecodeAsNil() {
				x.Controls = nil
			} else {
				yyv4 := &x.Controls
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					h.decSliceControlInstance((*[]ControlInstance)(yyv4), d)
				}
			}
		case "children":
			if r.TryDecodeAsNil() {
				x.Children = nil
			} else {
				yyv6 := &x.Children
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					h.decSliceNodeSummaryGroup((*[]NodeSummaryGroup)(yyv6), d)
				}
			}
		case "connections":
			if r.TryDecodeAsNil() {
				x.Connections = nil
			} else {
				yyv8 := &x.Connections
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					h.decSliceConnectionsSummary((*[]ConnectionsSummary)(yyv8), d)
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv10 := &x.ID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "label":
			if r.TryDecodeAsNil() {
				x.Label = ""
			} else {
				yyv12 := &x.Label
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "labelMinor":
			if r.TryDecodeAsNil() {
				x.LabelMinor = ""
			} else {
				yyv14 := &x.LabelMinor
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = ""
			} else {
				yyv16 := &x.Rank
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*string)(yyv16)) = r.DecodeString()
				}
			}
		case "shape":
			if r.TryDecodeAsNil() {
				x.Shape = ""
			} else {
				yyv18 := &x.Shape
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*string)(yyv18)) = r.DecodeString()
				}
			}
		case "stack":
			if r.TryDecodeAsNil() {
				x.Stack = false
			} else {
				yyv20 := &x.Stack
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(yyv20)) = r.DecodeBool()
				}
			}
		case "linkable":
			if r.TryDecodeAsNil() {
				x.Linkable = false
			} else {
				yyv22 := &x.Linkable
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*bool)(yyv22)) = r.DecodeBool()
				}
			}
		case "pseudo":
			if r.TryDecodeAsNil() {
				x.Pseudo = false
			} else {
				yyv24 := &x.Pseudo
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*bool)(yyv24)) = r.DecodeBool()
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv26 := &x.Metadata
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv26), d)
				}
			}
		case "parents":
			if r.TryDecodeAsNil() {
				x.Parents = nil
			} else {
				yyv28 := &x.Parents
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					h.decSliceParent((*[]Parent)(yyv28), d)
				}
			}
		case "metrics":
			if r.TryDecodeAsNil() {
				x.Metrics = nil
			} else {
				yyv30 := &x.Metrics
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv30), d)
				}
			}
		case "tables":
			if r.TryDecodeAsNil() {
				x.Tables = nil
			} else {
				yyv32 := &x.Tables
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					h.decSlicereport_Table((*[]pkg1_report.Table)(yyv32), d)
				}
			}
		case "adjacency":
			if r.TryDecodeAsNil() {
				x.Adjacency = nil
			} else {
				yyv34 := &x.Adjacency
				yyv34.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj35 int
	var yyb35 bool
	var yyhl35 bool = l >= 0
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Controls = nil
	} else {
		yyv36 := &x.Controls
		yym37 := z.DecBinary()
		_ = yym37
		if false {
		} else {
			h.decSliceControlInstance((*[]ControlInstance)(yyv36), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Children = nil
	} else {
		yyv38 := &x.Children
		yym39 := z.DecBinary()
		_ = yym39
		if false {
		} else {
			h.decSliceNodeSummaryGroup((*[]NodeSummaryGroup)(yyv38), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Connections = nil
	} else {
		yyv40 := &x.Connections
		yym41 := z.DecBinary()
		_ = yym41
		if false {
		} else {
			h.decSliceConnectionsSummary((*[]ConnectionsSummary)(yyv40), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv42 := &x.ID
		yym43 := z.DecBinary()
		_ = yym43
		if false {
		} else {
			*((*string)(yyv42)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Label = ""
	} else {
		yyv44 := &x.Label
		yym45 := z.DecBinary()
		_ = yym45
		if false {
		} else {
			*((*string)(yyv44)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.LabelMinor = ""
	} else {
		yyv46 := &x.LabelMinor
		yym47 := z.DecBinary()
		_ = yym47
		if false {
		} else {
			*((*string)(yyv46)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Rank = ""
	} else {
		yyv48 := &x.Rank
		yym49 := z.DecBinary()
		_ = yym49
		if false {
		} else {
			*((*string)(yyv48)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Shape = ""
	} else {
		yyv50 := &x.Shape
		yym51 := z.DecBinary()
		_ = yym51
		if false {
		} else {
			*((*string)(yyv50)) = r.DecodeString()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Stack = false
	} else {
		yyv52 := &x.Stack
		yym53 := z.DecBinary()
		_ = yym53
		if false {
		} else {
			*((*bool)(yyv52)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Linkable = false
	} else {
		yyv54 := &x.Linkable
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			*((*bool)(yyv54)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Pseudo = false
	} else {
		yyv56 := &x.Pseudo
		yym57 := z.DecBinary()
		_ = yym57
		if false {
		} else {
			*((*bool)(yyv56)) = r.DecodeBool()
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv58 := &x.Metadata
		yym59 := z.DecBinary()
		_ = yym59
		if false {
		} else {
			h.decSlicereport_MetadataRow((*[]pkg1_report.MetadataRow)(yyv58), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Parents = nil
	} else {
		yyv60 := &x.Parents
		yym61 := z.DecBinary()
		_ = yym61
		if false {
		} else {
			h.decSliceParent((*[]Parent)(yyv60), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Metrics = nil
	} else {
		yyv62 := &x.Metrics
		yym63 := z.DecBinary()
		_ = yym63
		if false {
		} else {
			h.decSlicereport_MetricRow((*[]pkg1_report.MetricRow)(yyv62), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Tables = nil
	} else {
		yyv64 := &x.Tables
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else {
			h.decSlicereport_Table((*[]pkg1_report.Table)(yyv64), d)
		}
	}
	yyj35++
	if yyhl35 {
		yyb35 = yyj35 > l
	} else {
		yyb35 = r.CheckBreak()
	}
	if yyb35 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Adjacency = nil
	} else {
		yyv66 := &x.Adjacency
		yyv66.CodecDecodeSelf(d)
	}
	for {
		yyj35++
		if yyhl35 {
			yyb35 = yyj35 > l
		} else {
			yyb35 = r.CheckBreak()
		}
		if yyb35 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj35-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x *wiredControlInstance) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 6
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ProbeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("probeId"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ProbeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.NodeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("nodeId"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.NodeID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("id"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.ID))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym13 := z.EncBinary()
				_ = yym13
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Human))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("human"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym14 := z.EncBinary()
				_ = yym14
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Human))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Icon))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("icon"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym17 := z.EncBinary()
				_ = yym17
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81256, string(x.Icon))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1256)
				yym19 := z.EncBinary()
				_ = yym19
				if false {
				} else {
					r.EncodeInt(int64(x.Rank))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1256)
				r.EncodeString(codecSelferC_UTF81256, string("rank"))
				z.EncSendContainerState(codecSelfer_containerMapValue1256)
				yym20 := z.EncBinary()
				_ = yym20
				if false {
				} else {
					r.EncodeInt(int64(x.Rank))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1256)
			}
		}
	}
}

func (x *wiredControlInstance) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap1256 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1256)
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray1256 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1256)
		}
	}
}

func (x *wiredControlInstance) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1256)
		yys3Slc = r.DecodeBytes(yys3Slc, true, true)
		yys3SlcHdr := codecSelferUnsafeString1256{uintptr(unsafe.Pointer(&yys3Slc[0])), len(yys3Slc)}
		yys3 := *(*string)(unsafe.Pointer(&yys3SlcHdr))
		z.DecSendContainerState(codecSelfer_containerMapValue1256)
		switch yys3 {
		case "probeId":
			if r.TryDecodeAsNil() {
				x.ProbeID = ""
			} else {
				yyv4 := &x.ProbeID
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else {
					*((*string)(yyv4)) = r.DecodeString()
				}
			}
		case "nodeId":
			if r.TryDecodeAsNil() {
				x.NodeID = ""
			} else {
				yyv6 := &x.NodeID
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "id":
			if r.TryDecodeAsNil() {
				x.ID = ""
			} else {
				yyv8 := &x.ID
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "human":
			if r.TryDecodeAsNil() {
				x.Human = ""
			} else {
				yyv10 := &x.Human
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "icon":
			if r.TryDecodeAsNil() {
				x.Icon = ""
			} else {
				yyv12 := &x.Icon
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "rank":
			if r.TryDecodeAsNil() {
				x.Rank = 0
			} else {
				yyv14 := &x.Rank
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*int)(yyv14)) = int(r.DecodeInt(codecSelferBitsize1256))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x *wiredControlInstance) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj16 int
	var yyb16 bool
	var yyhl16 bool = l >= 0
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ProbeID = ""
	} else {
		yyv17 := &x.ProbeID
		yym18 := z.DecBinary()
		_ = yym18
		if false {
		} else {
			*((*string)(yyv17)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.NodeID = ""
	} else {
		yyv19 := &x.NodeID
		yym20 := z.DecBinary()
		_ = yym20
		if false {
		} else {
			*((*string)(yyv19)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.ID = ""
	} else {
		yyv21 := &x.ID
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else {
			*((*string)(yyv21)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Human = ""
	} else {
		yyv23 := &x.Human
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Icon = ""
	} else {
		yyv25 := &x.Icon
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj16++
	if yyhl16 {
		yyb16 = yyj16 > l
	} else {
		yyb16 = r.CheckBreak()
	}
	if yyb16 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1256)
	if r.TryDecodeAsNil() {
		x.Rank = 0
	} else {
		yyv27 := &x.Rank
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*int)(yyv27)) = int(r.DecodeInt(codecSelferBitsize1256))
		}
	}
	for {
		yyj16++
		if yyhl16 {
			yyb16 = yyj16 > l
		} else {
			yyb16 = r.CheckBreak()
		}
		if yyb16 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1256)
		z.DecStructFieldNotFound(yyj16-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) encSliceNodeSummary(v []NodeSummary, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSliceNodeSummary(v *[]NodeSummary, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []NodeSummary{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 208)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]NodeSummary, yyrl1)
				}
			} else {
				yyv1 = make([]NodeSummary, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = NodeSummary{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, NodeSummary{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummary{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, NodeSummary{}) // var yyz1 NodeSummary
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummary{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []NodeSummary{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSliceColumn(v []Column, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSliceColumn(v *[]Column, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Column{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Column, yyrl1)
				}
			} else {
				yyv1 = make([]Column, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Column{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Column{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Column{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Column{}) // var yyz1 Column
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Column{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Column{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSliceConnection(v []Connection, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSliceConnection(v *[]Connection, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Connection{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Connection, yyrl1)
				}
			} else {
				yyv1 = make([]Connection, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Connection{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Connection{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Connection{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Connection{}) // var yyz1 Connection
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Connection{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Connection{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSlicereport_MetadataRow(v []pkg1_report.MetadataRow, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSlicereport_MetadataRow(v *[]pkg1_report.MetadataRow, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_report.MetadataRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_report.MetadataRow, yyrl1)
				}
			} else {
				yyv1 = make([]pkg1_report.MetadataRow, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = pkg1_report.MetadataRow{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, pkg1_report.MetadataRow{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.MetadataRow{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_report.MetadataRow{}) // var yyz1 pkg1_report.MetadataRow
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.MetadataRow{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []pkg1_report.MetadataRow{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encconnectionsByID(v connectionsByID, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decconnectionsByID(v *connectionsByID, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Connection{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Connection, yyrl1)
				}
			} else {
				yyv1 = make([]Connection, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Connection{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Connection{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Connection{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Connection{}) // var yyz1 Connection
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Connection{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Connection{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSliceParent(v []Parent, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSliceParent(v *[]Parent, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []Parent{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]Parent, yyrl1)
				}
			} else {
				yyv1 = make([]Parent, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = Parent{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, Parent{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Parent{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, Parent{}) // var yyz1 Parent
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = Parent{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []Parent{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSlicereport_MetricRow(v []pkg1_report.MetricRow, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSlicereport_MetricRow(v *[]pkg1_report.MetricRow, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_report.MetricRow{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_report.MetricRow, yyrl1)
				}
			} else {
				yyv1 = make([]pkg1_report.MetricRow, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = pkg1_report.MetricRow{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, pkg1_report.MetricRow{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.MetricRow{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_report.MetricRow{}) // var yyz1 pkg1_report.MetricRow
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.MetricRow{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []pkg1_report.MetricRow{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSlicereport_Table(v []pkg1_report.Table, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSlicereport_Table(v *[]pkg1_report.Table, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []pkg1_report.Table{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 104)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]pkg1_report.Table, yyrl1)
				}
			} else {
				yyv1 = make([]pkg1_report.Table, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = pkg1_report.Table{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, pkg1_report.Table{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.Table{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, pkg1_report.Table{}) // var yyz1 pkg1_report.Table
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = pkg1_report.Table{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []pkg1_report.Table{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encnodeSummariesByID(v nodeSummariesByID, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decnodeSummariesByID(v *nodeSummariesByID, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []NodeSummary{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 208)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]NodeSummary, yyrl1)
				}
			} else {
				yyv1 = make([]NodeSummary, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = NodeSummary{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, NodeSummary{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummary{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, NodeSummary{}) // var yyz1 NodeSummary
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummary{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []NodeSummary{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encNodeSummaries(v NodeSummaries, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk1, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1256)
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81256, string(yyk1))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1256)
		yy3 := &yyv1
		yy3.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x codecSelfer1256) decNodeSummaries(v *NodeSummaries, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyl1 := r.ReadMapStart()
	yybh1 := z.DecBasicHandle()
	if yyv1 == nil {
		yyrl1, _ := z.DecInferLen(yyl1, yybh1.MaxInitLen, 224)
		yyv1 = make(map[string]NodeSummary, yyrl1)
		*v = yyv1
	}
	var yymk1 string
	var yymv1 NodeSummary
	var yymg1 bool
	if yybh1.MapValueReset {
		yymg1 = true
	}
	if yyl1 > 0 {
		for yyj1 := 0; yyj1 < yyl1; yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1256)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv2 := &yymk1
				yym3 := z.DecBinary()
				_ = yym3
				if false {
				} else {
					*((*string)(yyv2)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = NodeSummary{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1256)
			if r.TryDecodeAsNil() {
				yymv1 = NodeSummary{}
			} else {
				yyv4 := &yymv1
				yyv4.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} else if yyl1 < 0 {
		for yyj1 := 0; !r.CheckBreak(); yyj1++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1256)
			if r.TryDecodeAsNil() {
				yymk1 = ""
			} else {
				yyv5 := &yymk1
				yym6 := z.DecBinary()
				_ = yym6
				if false {
				} else {
					*((*string)(yyv5)) = r.DecodeString()
				}
			}

			if yymg1 {
				yymv1 = yyv1[yymk1]
			} else {
				yymv1 = NodeSummary{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1256)
			if r.TryDecodeAsNil() {
				yymv1 = NodeSummary{}
			} else {
				yyv7 := &yymv1
				yyv7.CodecDecodeSelf(d)
			}

			if yyv1 != nil {
				yyv1[yymk1] = yymv1
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1256)
}

func (x codecSelfer1256) encSliceControlInstance(v []ControlInstance, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSliceControlInstance(v *[]ControlInstance, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []ControlInstance{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 88)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]ControlInstance, yyrl1)
				}
			} else {
				yyv1 = make([]ControlInstance, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = ControlInstance{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, ControlInstance{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ControlInstance{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, ControlInstance{}) // var yyz1 ControlInstance
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ControlInstance{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []ControlInstance{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSliceNodeSummaryGroup(v []NodeSummaryGroup, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSliceNodeSummaryGroup(v *[]NodeSummaryGroup, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []NodeSummaryGroup{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]NodeSummaryGroup, yyrl1)
				}
			} else {
				yyv1 = make([]NodeSummaryGroup, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = NodeSummaryGroup{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, NodeSummaryGroup{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummaryGroup{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, NodeSummaryGroup{}) // var yyz1 NodeSummaryGroup
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = NodeSummaryGroup{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []NodeSummaryGroup{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}

func (x codecSelfer1256) encSliceConnectionsSummary(v []ConnectionsSummary, e *codec1978.Encoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1256)
		yy2 := &yyv1
		yy2.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1256)
}

func (x codecSelfer1256) decSliceConnectionsSummary(v *[]ConnectionsSummary, d *codec1978.Decoder) {
	var h codecSelfer1256
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []ConnectionsSummary{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else if yyl1 > 0 {
		var yyrr1, yyrl1 int
		var yyrt1 bool
		_, _ = yyrl1, yyrt1
		yyrr1 = yyl1 // len(yyv1)
		if yyl1 > cap(yyv1) {

			yyrg1 := len(yyv1) > 0
			yyv21 := yyv1
			yyrl1, yyrt1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 96)
			if yyrt1 {
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]ConnectionsSummary, yyrl1)
				}
			} else {
				yyv1 = make([]ConnectionsSummary, yyrl1)
			}
			yyc1 = true
			yyrr1 = len(yyv1)
			if yyrg1 {
				copy(yyv1, yyv21)
			}
		} else if yyl1 != len(yyv1) {
			yyv1 = yyv1[:yyl1]
			yyc1 = true
		}
		yyj1 := 0
		for ; yyj1 < yyrr1; yyj1++ {
			yyh1.ElemContainerState(yyj1)
			if r.TryDecodeAsNil() {
				yyv1[yyj1] = ConnectionsSummary{}
			} else {
				yyv2 := &yyv1[yyj1]
				yyv2.CodecDecodeSelf(d)
			}

		}
		if yyrt1 {
			for ; yyj1 < yyl1; yyj1++ {
				yyv1 = append(yyv1, ConnectionsSummary{})
				yyh1.ElemContainerState(yyj1)
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ConnectionsSummary{}
				} else {
					yyv3 := &yyv1[yyj1]
					yyv3.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1 := 0
		for ; !r.CheckBreak(); yyj1++ {

			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, ConnectionsSummary{}) // var yyz1 ConnectionsSummary
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			if yyj1 < len(yyv1) {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ConnectionsSummary{}
				} else {
					yyv4 := &yyv1[yyj1]
					yyv4.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = []ConnectionsSummary{}
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}
}
